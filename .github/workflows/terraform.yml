name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform-provision:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: terraform/root
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform

    - name: Setup Kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/eks-kubeconfig.yaml
        export KUBECONFIG=~/.kube/eks-kubeconfig.yaml

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init -input=false 

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        terraform plan -input=false \
        -var="aws_region=${{ secrets.AWS_REGION }}" \
        -var="aws_availability_zone_1=${{ secrets.AWS_AVAILABILITY_ZONE_1 }}" \
        -var="aws_availability_zone_2=${{ secrets.AWS_AVAILABILITY_ZONE_2 }}" \
        -var="cluster=${{ secrets.CLUSTER }}" \
        -var="domain=${{ secrets.DOMAIN }}" \
        -var="cname=${{ secrets.CNAME }}" \
        -var="db_username=${{ secrets.DB_USERNAME }}" \
        -var="db_password=${{ secrets.DB_PASSWORD }}" \
        -var="kubeconfig=${{ secrets.KUBECONFIG }}" 

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        terraform apply -auto-approve -input=false \
        -var="aws_region=${{ secrets.AWS_REGION }}" \
        -var="aws_availability_zone_1=${{ secrets.AWS_AVAILABILITY_ZONE_1 }}" \
        -var="aws_availability_zone_2=${{ secrets.AWS_AVAILABILITY_ZONE_2 }}" \
        -var="cluster=${{ secrets.CLUSTER }}" \
        -var="domain=${{ secrets.DOMAIN }}" \
        -var="cname=${{ secrets.CNAME }}" \
        -var="db_username=${{ secrets.DB_USERNAME }}" \
        -var="db_password=${{ secrets.DB_PASSWORD }}" \
        -var="kubeconfig=${{ secrets.KUBECONFIG }}"
